local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
	Name = "[RELEASE!] Project New World By VernyHub",
	LoadingTitle = "[RELEASE!] Project New World By VernyHub",
	LoadingSubtitle = "by Verny Hub",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "Verny Hub V2", -- Create a custom folder for your hub/game
		FileName = "Verny Hub PNW"
	},
        Discord = {
        	Enabled = true,
        	Invite = "dwuSS95ecF", -- The Discord invite code, do not include discord.gg/
        	RememberJoins = true -- Set this to false to make them join the discord every time they load it up
        },
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Sirius Hub",
		Subtitle = "Key System",
		Note = "Join the discord (discord.gg/sirius)",
		FileName = "SiriusKey",
		SaveKey = true,
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = "Hello"
	}
})

local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image

_G.plrn = game.Players.LocalPlayer.Name

for i,v in ipairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
    if v:IsA("NumberValue") then
        v.Value = 0
    end
end

game:GetService("ReplicatedStorage").Replication.ClientEvents.ChooseTeam:InvokeServer("Pirates")

local maps = game:GetService("Workspace").Islands

local mapsTable = {}

for i,v in ipairs(maps:GetChildren()) do
    if v:IsA("Folder") then
        table.insert(mapsTable, v.Name)
    end
end


local Dropdown = Tab:CreateDropdown({
	Name = "Select Map",
	Options = mapsTable,
	CurrentOption = "Option 1",
	Flag = "MapSave1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
        _G.CurrentMap = Option;
	end,
})

local Slider = Tab:CreateSlider({
	Name = "Change Distance",
	Range = {1, 100},
	Increment = 1,
	Suffix = "Distance",
	CurrentValue = 10,
	Flag = "Distance1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.distance = Value;
	end,
})

local Dropdown = Tab:CreateDropdown({
	Name = "Select Method",
	Options = {"Behind","Above", "Below", "Front"},
	CurrentOption = "Option 1",
	Flag = "Method", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
        _G.method = Option;
	end,
})



local Toggle = Tab:CreateToggle({
	Name = "Auto Farm Selected Area",
	CurrentValue = false,
	Flag = "AutoFarm", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoFarm = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.CurrentMap ~= nil and  _G.method ~= nil and _G.autoFarm then
            for i,v in ipairs(game:GetService("Workspace")["NPC Zones"]:WaitForChild(_G.CurrentMap).NPCS:GetChildren()) do
                if v:IsA("Model") then
                    pcall(function()
                    if _G.method == "Behind" then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0,0,_G.distance)
                    elseif _G.method == "Above" then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0,_G.distance,0)
                    elseif _G.method == "Below" then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0,-_G.distance,0)
                    elseif _G.method == "Front" then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.HumanoidRootPart.CFrame * CFrame.new(0,0,-_G.distance)
                        end
                    end)
                end
            end 
        end
    end
end)

local Tab = Window:CreateTab("Auto Fight", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Combat")

local Toggle = Tab:CreateToggle({
	Name = "Auto Equip Combat ",
	CurrentValue = false,
	Flag = "AutoEquipCombat", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoEquip = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoEquip then
            pcall(function()
                game.Players.LocalPlayer.Character.Humanoid:EquipTool(game:GetService("Players").LocalPlayer.Backpack.Combat)
                wait(1)
            end)
        end
    end
end)

local Toggle = Tab:CreateToggle({
	Name = "Auto Punch ",
	CurrentValue = false,
	Flag = "Autopunch", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoPunch = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoPunch then
            pcall(function()
            workspace[_G.plrn].Combat.Punch:FireServer(1)
            wait(0.1)
            end)
        end
    end
end)

local Toggle = Tab:CreateToggle({
	Name = "Auto Heavy Punch",
	CurrentValue = false,
	Flag = "Auto Heavy", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoHeavy = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoHeavy then
            pcall(function()
                local targetdistance = 501
    local target
        for i,v in ipairs(game:GetService("Workspace")["NPC Zones"][_G.CurrentMap].NPCS:GetChildren()) do
            if v:IsA("Model") then
                local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
                if distance < targetdistance and distance < 500 then
            workspace[_G.plrn].Combat.Events.DetriotSmash:FireServer(1,CFrame.new(v.HumanoidRootPart.Position))
        end
    end
end

                wait(0.2)
            end)
        end
    end
end)


local Toggle = Tab:CreateToggle({
	Name = "Auto Ground Smash",
	CurrentValue = false,
	Flag = "Auto Ground Smash", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoGround = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoGround then
            pcall(function()
                local targetdistance = 501
    local target
        for i,v in ipairs(game:GetService("Workspace")["NPC Zones"][_G.CurrentMap].NPCS:GetChildren()) do
            if v:IsA("Model") then
                local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
                if distance < targetdistance and distance < 500 then
                    workspace[_G.plrn].Combat.Events.GroundSmash:FireServer()
        end
    end
end

                wait(0.2)
            end)
        end
    end
end)



local Tab = Window:CreateTab("Auto Quest", 4483362458) -- Title, Image

local Dropdown = Tab:CreateDropdown({
	Name = "Select World (For Quest)",
	Options = {"1","2", "3", "4", "5", "6", "7", "8", "9", "10"},
	CurrentOption = "Option 1",
	Flag = "QuestMap", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
        _G.QuestMap = Option;
	end,
})

local Dropdown = Tab:CreateDropdown({
	Name = "Select Quest",
	Options = {"Level 1","Level 10", "Level 25", "Level 40", "Level 60", "Level 90", "Level 120", "Level 160", "Level 200", "Level 250", "Level 300", "Level 350", "Level 400", "Level 450", "Level 500", "Level 550", "Level 600", "Level 650", "Level 700", "Level 750", "Level 800", "Level 850", "Level 900"},
	CurrentOption = "Option 1",
	Flag = "QuestLVL", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
        _G.CurrentQuest = Option;
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Auto Take Quest",
	CurrentValue = false,
	Flag = "Auto Quest", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoQuest = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoQuest and _G.QuestMap ~= nil and _G.CurrentQuest then
            pcall(function()
                if game:GetService("Players").LocalPlayer.Quest.Beli.Value < 1 then
                    game:GetService("Players").LocalPlayer.PlayerGui.QuestGui.QuestFunction:InvokeServer(workspace.Npc_Workspace.QuestGivers[_G.QuestMap][_G.QuestMap],_G.CurrentQuest)
                    wait(0.5)
                elseif game:GetService("Players").LocalPlayer.Quest.Beli.Value > 1 then
                        wait(0.5)
                    warn("Already Got Quest")
                end
            end)
        end
    end
end)

local Tab = Window:CreateTab("Auto Stats", 4483362458) -- Title, Image


local Toggle = Tab:CreateToggle({
	Name = "Auto Stat Combat",
	CurrentValue = false,
	Flag = "Auto Stat Combat", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoStat1 = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoStat1 then
            game:GetService("ReplicatedStorage").Replication.ClientEvents.Stats_Event:FireServer("Combat",1)
            wait(0.05)
        end
    end
end)

local Toggle = Tab:CreateToggle({
	Name = "Auto Stat Defense",
	CurrentValue = false,
	Flag = "Auto Stat Defense", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoStat2 = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoStat2 then
            game:GetService("ReplicatedStorage").Replication.ClientEvents.Stats_Event:FireServer("Defense",1)
            wait(0.05)
        end
    end
end)


local Toggle = Tab:CreateToggle({
	Name = "Auto Stat Sword",
	CurrentValue = false,
	Flag = "Auto Stat Sword", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoStat3 = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoStat3 then
            game:GetService("ReplicatedStorage").Replication.ClientEvents.Stats_Event:FireServer("Sword",1)
            wait(0.05)
        end
    end
end)



local Toggle = Tab:CreateToggle({
	Name = "Auto Stat Fruit",
	CurrentValue = false,
	Flag = "Auto Stat Fruit", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoStat4 = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoStat4 then
            game:GetService("ReplicatedStorage").Replication.ClientEvents.Stats_Event:FireServer("Fruit",1)
            wait(0.05)
        end
    end
end)

local Tab = Window:CreateTab("Chests/Fruits", 4483362458) -- Title, Image



local Input = Tab:CreateInput({
	Name = "Input Fruit to auto drop",
	PlaceholderText = "Input Fruit Name",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
        _G.FruitDrop1 = Text
	end,
})

local Input = Tab:CreateInput({
	Name = "Input Fruit to auto drop",
	PlaceholderText = "Input Fruit Name",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
        _G.FruitDrop2 = Text
	end,
})

local Input = Tab:CreateInput({
	Name = "Input Fruit to auto drop",
	PlaceholderText = "Input Fruit Name",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
        _G.FruitDrop3 = Text
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Auto Drop Selected Fruits",
	CurrentValue = false,
	Flag = "autodrop", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autodrop = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autodrop and _G.FruitDrop ~= nil then
            game:GetService("ReplicatedStorage").Replication.ClientEvents.DropFruit:InvokeServer(workspace.Logic.FruitDrops[_G.plrn][_G.FruitDrop1])
            wait(1)
            game:GetService("ReplicatedStorage").Replication.ClientEvents.DropFruit:InvokeServer(workspace.Logic.FruitDrops[_G.plrn][_G.FruitDrop2])
            wait(1)
            game:GetService("ReplicatedStorage").Replication.ClientEvents.DropFruit:InvokeServer(workspace.Logic.FruitDrops[_G.plrn][_G.FruitDrop3])
        end
    end
end)

local Input = Tab:CreateInput({
	Name = "Input Fruit to auto eat",
	PlaceholderText = "Input Fruit Name",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
        _G.FruitEat1 = Text
	end,
})

local Input = Tab:CreateInput({
	Name = "Input Fruit to auto eat",
	PlaceholderText = "Input Fruit Name",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
        _G.FruitEat2 = Text
	end,
})

local Input = Tab:CreateInput({
	Name = "Input Fruit to auto eat",
	PlaceholderText = "Input Fruit Name",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
        _G.FruitEat3 = Text
	end,
})

local Input = Tab:CreateInput({
	Name = "Input Fruit to auto eat",
	PlaceholderText = "Input Fruit Name",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
        _G.FruitEat4 = Text
	end,
})

local Input = Tab:CreateInput({
	Name = "Input Fruit to auto eat",
	PlaceholderText = "Input Fruit Name",
	RemoveTextAfterFocusLost = false,
	Callback = function(Text)
        _G.FruitEat5 = Text
	end,
})

local Toggle = Tab:CreateToggle({
	Name = "Auto Eat Selected Fruit",
	CurrentValue = false,
	Flag = "autoeat", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
        _G.autoeat = Value;
	end,
})

task.spawn(function()
    while wait() do
        if _G.autoeat and _G.FruitEat1 ~= nil then
            workspace[_G.plrn][_G.FruitEat1].Activate:FireServer()
            wait(1)
            workspace[_G.plrn][_G.FruitEat2].Activate:FireServer()
            wait(1)
            workspace[_G.plrn][_G.FruitEat3].Activate:FireServer()
            wait(1)
            workspace[_G.plrn][_G.FruitEat4].Activate:FireServer()
            wait(1)
            workspace[_G.plrn][_G.FruitEat5].Activate:FireServer()
        end
    end
end)

Rayfield:LoadConfiguration()
